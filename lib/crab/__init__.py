class CrabError(Exception):
    """Base class for exceptions raised internally by crab.

    Library functions should re-raise expected exceptions as a
    CrabError to allow them to be trapped conveniently without
    accidentally trapping other errors."""
    pass

class CrabStatus:
    """Helper class for status codes.

    The crab libraries should refer to codes by the symbolic
    names given in this class.

    VALUES is the set of status codes which should be accepted from
    a client.  Other codes are for internal use, such as those
    generated by the monitor."""

    SUCCESS = 0
    FAIL = 1
    UNKNOWN = 2
    COULDNOTSTART = 3

    VALUES = set([SUCCESS, FAIL, UNKNOWN, COULDNOTSTART])

    # Additional internal status values (it is not valid for
    # a client to send these).  Also some of these are less bad
    # than the client statuses.  For example, if something has a 
    # status of FAIL, you don't want to change it to just LATE.
    LATE = -1
    MISSED = -2
    TIMEOUT = -3

    _error_names = ['Succeeded', 'Failed', 'Unknown', 'Could not start']
    _warning_names = ['Late', 'Missed', 'Timed out']

    @staticmethod
    def get_name(status):
        """Returns a readable name for the given status code."""
        try:
            if status is None:
                return 'Undefined'
            elif status >= 0:
                # TODO: find out if this can be referred to without class name?
                return CrabStatus._error_names[status]
            else:
                return CrabStatus._warning_names[(-1) - status]
        except IndexError:
            return 'Status ' + int(status)

    @staticmethod
    def is_trivial(status):
        """Determines whether a status code is trivial and should
        mostly be ignored."""
        return status == CrabStatus.LATE

    @staticmethod
    def is_ok(status):
        """Returns true if the code does not indicate any kind of problem."""
        return status == CrabStatus.SUCCESS or CrabStatus.is_trivial(status)

    @staticmethod
    def is_warning(status):
        """True if the given status is some kind of warning."""
        return status == CrabStatus.UNKNOWN or status == CrabStatus.MISSED

    @staticmethod
    def is_error(status):
        """True if the given status is an error, i.e. not OK and not a
        warning."""
        return not (CrabStatus.is_ok(status) or CrabStatus.is_warning(status))

class CrabEvent:
    """Helper class for crab events.

    Currently just provides symbolic names for the event types."""
    START = 1
    WARN = 2
    FINISH = 3

    _event_names = ['Started', 'Warning', 'Finished']

    @staticmethod
    def get_name(event):
        """Returns a readable name for the given event type code."""

        try:
            return CrabEvent._event_names[event - 1]

        except IndexError:
            return 'Event ' + int(event)
