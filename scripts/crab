#!/usr/bin/env python2

import os
import sys
import subprocess
from optparse import OptionParser

from crab import CrabError, CrabStatus
from crab.client import CrabClient
from crab.util.guesstimezone import guess_timezone

def main():
    parser = OptionParser(usage = """Usage: %prog [options] [command]

Commands:
  start, finish, unknown - report cron job progress
  fail, couldnotstart    - report problems with cron job
  import                 - send crontab to server
  export                 - display cron jobs from server
  info                   - print current configuration""")

    parser.add_option('-c',
        type='string', dest='command',
        help='specify the cron COMMAND being reported', metavar='COMMAND')
    parser.add_option('--id',
        type='string', dest='jobid',
        help='specify the cron job ID to report', metavar='ID')
    parser.add_option('--raw',
        action="store_true", dest="raw", default=False,
        help="fetch crontab from server exactly as last imported")

    (options, args) = parser.parse_args()

    status_commands = ['finish', 'fail', 'unknown', 'couldnotstart']

    if len(args) == 0:
        parser.error('no command specified')

    elif args[0] == 'start' or args[0] in status_commands:
        if options.command is None:
            parser.error('no command specified')
        else:
            try:
                client = CrabClient(options.command, jobid=options.jobid)

                if args[0] == 'start':
                    client.start()
                else:
                    client.finish(status=status_commands.index(args[0]))
            #except CrabError as err:
            except CrabError, err:
                print sys.argv[0], ':', str(err)

    elif args[0] == 'import':
        try:
            p = subprocess.Popen('crontab -l',
                                 shell=True, stdout=subprocess.PIPE)
            (stdoutdata, stderrdata) = p.communicate()

            if p.returncode:
                print sys.argv[0], ': failed to read crontab'
            else:
                # Try to figure out the system's local timezone.
                # This might not always be the timezone cron uses
                # for example if configured in /etc/default/cron
                # so if in doubt, environment variable TZ should be set.
                tz = None

                if 'TZ' in os.environ:
                    tz = os.environ['TZ']
                else:
                    tz = guess_timezone()

                client = CrabClient()
                client.send_crontab(stdoutdata, timezone=tz)

        #except OSError as err:
        except OSError, err:
            print sys.argv[0], ': could not execute crontab command'

        #except CrabError as err:
        except CrabError, err:
            print sys.argv[0], ': failed to send crontab :', str(err)

    elif args[0] == 'export':
        try:
            client = CrabClient()
            crontab = client.fetch_crontab(raw=options.raw)
            print crontab
        #except CrabError as err:
        except CrabError, err:
            print sys.argv[0], ': failed to fetch crontab :', str(err)

    elif args[0] == 'help':
        parser.print_help()

    elif args[0] == 'info':
        client = CrabClient()
        print(client.get_info())

    else:
        parser.error('command not recognised')

if __name__ == '__main__':
    main()
