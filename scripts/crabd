#!/usr/bin/env python2

from BaseHTTPServer import HTTPServer
import sqlite3

from crab.db import CrabDB
from crab.server import CrabServer
from crab.monitor import CrabMonitor
from crab.web import CrabWeb

class CrabHandler(CrabServer, CrabWeb):

    # Static variable which must be set to the storage backend
    # to be used.  It's called 'store' so that it could take a
    # type using a storage mechanism other than a database.
    store = None

    # Static variable which must contain the CrabMonitor thread
    # so that we can access status information.
    monitor = None

    @staticmethod
    def initialize(store, monitor):
        CrabHandler.store = store
        CrabHandler.monitor = monitor
        CrabServer.initialize()
        CrabWeb.initialize()

    def is_crab(self):
        return self.path.startswith('/api/')

    def do_GET(self):
        if self.is_crab():
            CrabServer.do_GET(self)
        else:
            CrabWeb.do_GET(self)

    def do_POST(self):
        if self.is_crab():
            CrabServer.do_POST(self)
        else:
            CrabWeb.do_POST(self)

    def do_PUT(self):
        if self.is_crab():
            CrabServer.do_PUT(self)
        else:
            CrabWeb.do_PUT(self)


def main():
    dbconn = sqlite3.connect("crab.db")
    c = dbconn.cursor()
    c.execute("PRAGMA foreign_keys = ON");
    c.close()

    store = CrabDB(dbconn)
    monitor = CrabMonitor(store)
    monitor.daemon = True
    monitor.start()

    CrabHandler.initialize(store = store, monitor = monitor)

    httpd = HTTPServer(("", 8000), CrabHandler)
    httpd.serve_forever()

if __name__ == "__main__":
    main()
